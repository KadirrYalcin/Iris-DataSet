# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jrVno_3FN6v32N39sN-frsTx2CdUvdvC
"""



# Gerekli kütüphaneleri içe aktar
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

# Iris verisetini yükle
df = pd.read_csv("iris.data")
# Kolon isimlerini ayarla
df.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']

x=df.drop(columns=['species'])
y=df['species']
df.head()

# Veriyi eğitim ve test setlerine böl
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Gaussian Naive Bayes modelini oluştur
model = GaussianNB()

# Modeli eğitim verisi ile eğit
model.fit(X_train, y_train)
# Test verisi üzerinde tahminler yap
y_pred = model.predict(X_test)

# Modelin doğruluğunu hesapla
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

# Sınıflandırma raporunu ve karmaşıklık matrisini yazdır
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Karar ağacı modelini oluştur
model = DecisionTreeClassifier(random_state=42)

# Modeli eğitim verisi ile eğit
model.fit(X_train, y_train)
# Test verisi üzerinde tahminler yap
y_pred = model.predict(X_test)

# Modelin doğruluğunu hesapla
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

# Sınıflandırma raporunu ve karmaşıklık matrisini yazdır
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

score_list=[]
for each in range(1,15):
  knn2=KNeighborsClassifier(n_neighbors=each)
  knn2.fit(X_train,y_train)
  score_list.append(knn2.score(X_test,y_test))
plt.plot(range(1,15),score_list)
plt.xlabel("k values")
plt.ylabel("accuracy")
plt.show()

# KNN modelini tanımlayalım

from sklearn.model_selection import  GridSearchCV
knn = KNeighborsClassifier()

# GridSearchCV için parametreler ve değerlerini belirleyelim
param_grid = {'n_neighbors': range(1, 21)} # K değerlerini 1'den 20'ye kadar dene

# GridSearchCV oluşturalım
model = GridSearchCV(knn, param_grid, cv=5)

# Modeli eğitelim
model.fit(X_train, y_train)
# Test verisi üzerinde tahminler yap
y_pred = model.predict(X_test)


# En iyi parametreleri ve skoru görelim
print("En iyi K değeri:", model.best_params_)
# Modelin doğruluğunu hesapla
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

# Sınıflandırma raporunu ve karmaşıklık matrisini yazdır
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# KNN modelini oluştur
model = KNeighborsClassifier(n_neighbors=10)

# Modeli eğitim verisi ile eğit
model.fit(X_train, y_train)
# Test verisi üzerinde tahminler yap
y_pred = model.predict(X_test)

# Modelin doğruluğunu hesapla
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

# Sınıflandırma raporunu ve karmaşıklık matrisini yazdır
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# 1. İris verisetini yükle
iris = load_iris()
X = iris.data
y = iris.target

# 2. Veriyi eğitim ve test setlerine ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. SVM modeli oluştur ve eğit
# SVC (Support Vector Classification) sınıfını kullanarak bir SVM modeli oluşturuyoruz
model = SVC(kernel='linear')  # 'linear', 'poly', 'rbf', 'sigmoid' gibi çeşitli çekirdek fonksiyonlar kullanılabilir
model.fit(X_train, y_train)

# 4. Test seti üzerinde tahmin yap
y_pred = model.predict(X_test)

# 5. Modelin doğruluğunu hesapla
accuracy = accuracy_score(y_test, y_pred)
print(f"Doğruluk: {accuracy}")

# Modelin performansı ile ilgili daha fazla bilgi almak için, diğer metrikleri de hesaplayabilirsiniz
from sklearn.metrics import classification_report, confusion_matrix

# Sınıflandırma raporu
print(classification_report(y_test, y_pred, target_names=iris.target_names))

# Karışıklık matrisi
print(confusion_matrix(y_test, y_pred))

# Görselleştirme
import seaborn as sns
import matplotlib.pyplot as plt
iris_setosa=df[df.species=='Iris-setosa']
iris_versicolor=df[df.species=='Iris-versicolor']
iris_virginica=df[df.species=="Iris-virginica"]
iris_virginica.info()

plt.scatter(iris_setosa.sepal_length, iris_setosa.sepal_width, color="red", label="iris_setosa", alpha=0.3)
plt.scatter(iris_versicolor.sepal_length, iris_versicolor.sepal_width, color="blue", label="iris_versicolor", alpha=0.3)
plt.scatter(iris_virginica.sepal_length, iris_virginica.sepal_width, color="green", label="iris_virginica", alpha=0.3)
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.legend()
plt.show()

plt.scatter(iris_setosa.petal_length, iris_setosa.petal_width, color="red", label="iris_setosa", alpha=0.3)
plt.scatter(iris_versicolor.petal_length, iris_versicolor.petal_width, color="blue", label="iris_versicolor", alpha=0.3)
plt.scatter(iris_virginica.petal_length, iris_virginica.petal_width, color="green", label="iris_virginica", alpha=0.3)
plt.xlabel("Petal Length")
plt.ylabel("Petal Width")
plt.legend()
plt.show()